#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
# The first ten pentagonal numbers are:
#
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
# D = |Pk − Pj| is minimised; what is the value of D?

# from math import sqrt
import math
import time

ti=time.time()

def pentagonal_numbers(limit):
    for i in range(1, limit+1):
        yield i * (3 * i - 1) / 2

def is_pentagonal_numbers(num):
    a, b, c = 3, -1, (num * -2)
    discriminant = (b*b - 4*a*c)

    if discriminant > 0:
        rt = math.sqrt(discriminant)
        root1 = (-b + rt) / (2 * a)
        # root2 = (-b - rt) / (2 * a)
        return True if root1 - int(root1) == 0 else False
    elif discriminant == 0:
        # root = -b / (2 * a)
        return True
    return False

def solution():
    frame = 1000
    prev = {}
    for idx, num in enumerate(pentagonal_numbers(10000)):
        counter = frame
        for j in prev:
            if counter <= 0:
                break
            counter -= 1

            if is_pentagonal_numbers(num - j) and is_pentagonal_numbers(num + j):
                # print 'k=', num, 'j=', j
                return num - j
        prev[num] = True

    return False

print 'Answer is:', solution(), '(time:', (time.time()-ti), ')'
